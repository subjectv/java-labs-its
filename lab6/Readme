### 1. Що таке immutable об’єкт? Для чого об’єкти класу String зробили імутабельними? Чому клас String задекларований як final?

**Immutable об’єкт** — це об’єкт, стан якого не можна змінити після його створення. Всі методи цього об’єкта не змінюють його внутрішній стан, а повертають нові об’єкти з оновленим станом.

Об’єкти класу **String** зробили імутабельними для кількох причин:
- **Безпека**: Імутабельність дозволяє уникнути змін значень рядків в межах програм, що важливо для безпеки даних.
- **Оптимізація пам'яті**: Оскільки рядки є незмінними, Java може використовувати кешування рядків у пулі рядків, що допомагає зменшити споживання пам'яті та прискорити доступ до рядків.
- **Надійність**: Якщо рядок передається між різними частинами програми, можна бути впевненим, що його значення не буде змінене.

**Клас String задекларований як final**, щоб запобігти його успадкуванню. Це гарантує, що ніхто не зможе змінити його поведінку або внутрішню реалізацію, що важливо для забезпечення безпеки та стабільності.

### 2. Що таке регулярні вирази? Наведіть приклади регулярних виразів.

**Регулярні вирази** (регекси) — це спеціальний синтаксис, який дозволяє описати шаблони для пошуку, перевірки чи маніпуляцій з текстовими даними. Регекси широко використовуються для перевірки формату введених даних (наприклад, перевірка email, телефонних номерів, паролів).

Приклад регулярних виразів:
- `\d{3}` — три цифри поспіль.
- `[a-zA-Z]+` — один або більше літер (великих або малих).
- `\s+` — один або більше пробілів.
- `^\d{4}$` — точний збіг з чотирма цифрами.

### 3. В чому полягає різниця між оператором «==» та методом «equals()»?

- **Оператор «==»** використовується для порівняння **посилань на об’єкти**. Якщо два об’єкти вказують на одну й ту саму область пам’яті, то «==» поверне `true`.
  
- **Метод «equals()»** використовується для порівняння **значень** об’єктів. Для класів, таких як String, метод `equals()` порівнює фактичний вміст об’єктів, а не їхні посилання.

### 4. Для чого потрібні класи StringBuilder та StringBuffer?

Класи **StringBuilder** і **StringBuffer** використовуються для роботи з **змінними рядками** в Java. Вони дозволяють змінювати рядок без створення нових об'єктів, що значно підвищує ефективність при великій кількості змін.

- **StringBuilder** — використовується в однопотокових програмах. Він не синхронізований.
- **StringBuffer** — синхронізований клас, використовується в багатопотокових програмах для забезпечення потокобезпечності.

### 5. Яким чином простіше всього прибрати пробіли на початку та кінці об’єкту String?

Для видалення пробілів на початку та в кінці рядка можна використовувати метод **`trim()`** класу String:

```java
String str = "  Hello World!  ";
str = str.trim(); // "Hello World!"
```