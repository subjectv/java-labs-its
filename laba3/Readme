## 1. Що таке структурне програмування?

Структурне програмування — це методологія програмування, що базується на використанні логічних конструкцій (послідовність, вибір, цикли) для організації коду. Воно сприяє створенню чистого, зрозумілого та легко підтримуваного коду, виключаючи використання операторів переходу (GOTO).

## 2. Назвіть основні конструкції структурного програмування.

Основні конструкції структурного програмування:
- **Послідовність**: виконання інструкцій у порядку їх написання.
- **Умовний оператор** (if, if-else, switch): для вибору дій залежно від умов.
- **Цикли** (while, do-while, for): для повторення набору інструкцій.

## 3. Назвіть основні принципи структурного програмування.

Основні принципи структурного програмування:
- Використання лише трьох основних конструкцій: послідовності, вибору та циклів.
- Уникання використання оператора GOTO для контролю потоку виконання.
- Створення коду, який легко читається і підтримується.

## 4. Поясніть, чому в більшості мов програмування не радять використовувати оператор GOTO, а в мові Java його взагалі немає?

Оператор GOTO порушує структуру коду, створюючи "спагеті-код", який важко читати і підтримувати. Використання GOTO дозволяє виконувати перехід в будь-яке місце програми, що ускладнює розуміння логіки коду. У Java оператор GOTO відсутній для забезпечення кращої структури програм і запобігання хаосу в коді.

## 5. Що таке спагеті-код?

Спагеті-код — це код, який написаний без чіткої структури та логіки. Він характеризується заплутаними, неорганізованими переходами між частинами програми, що ускладнює його розуміння та підтримку.

## 6. Що таке проектування зверху-вниз? В чому його переваги?

Проектування зверху-вниз — це метод розробки програмного забезпечення, коли спочатку створюється загальна структура програми, а потім поступово деталізуються її частини. Це дозволяє побудувати ефективну та зрозумілу архітектуру з самого початку.

## 7. Що таке область видимості ідентифікатора?

Область видимості ідентифікатора — це частина програми, де змінна чи функція доступні для використання. Це визначається місцем, де вони оголошені.

## 8. Що таке блок? Як блоки впливають на область видимості?

Блок — це група інструкцій, об'єднаних фігурними дужками `{}`. Блоки створюють локальні області видимості для змінних, обмежуючи доступ до них тільки всередині цього блоку.

## 9. Наведіть приклади, у яких випадках краще використовувати наступні оператори та конструкції:

- **if**: коли потрібно виконати одну інструкцію при виконанні умови.
- **if-else**: коли потрібно виконати одну інструкцію, якщо умова істинна, і іншу, якщо вона хибна.
- **ланцюги if-else if -else if...**: коли є кілька умов, за якими вибирається одне з варіантів.
- **switch**: коли є кілька варіантів для порівняння однієї змінної (краще для множинних перевірок).
- **тернарна умовна операція ?**: коли потрібно скоротити код, якщо є проста умова.

## 10. Наведіть приклади, у яких випадках краще використовувати наступні оператори та конструкції:

- **while**: коли кількість ітерацій невідома заздалегідь, і цикл повинен виконуватись, поки виконується певна умова.
- **do-while**: коли потрібно виконати блок коду хоча б один раз, а потім повторювати, поки виконується умова.
- **for**: коли є чітке число ітерацій, і потрібно обробити кожен елемент в межах цього числа.

## 11. Чим оператор break відрізняється від оператора continue?

- **break**: припиняє виконання циклу або оператора switch і виходить з нього.
- **continue**: пропускає поточну ітерацію циклу та переходить до наступної ітерації.

## 12. Навіщо у мові Java є мітки, якщо немає goto?

Мітки у Java використовуються для позначення точок у коді, до яких можна здійснити перехід з використанням операторів break або continue в багаторівневих циклах. Вони допомагають контролювати потік виконання без порушення структури коду.

## 13. До якого результату призведе виконання наступного фрагменту коду? Перевірте. Поясніть.

```java
boolean a = false;
boolean b = false;
if (a = false) {
    System.out.println("a is false");
}
if (b = true) {
    System.out.println("b is true");
}
if (a = b) {
    System.out.println("a = b");
}
``` 

Результат:

a is false
b is true
a = b

- **Пояснення**: у виразах a = false та b = true використовується оператор присвоєння, а не порівняння. Тому змінні a та b набувають значень false та true відповідно. Після цього, у виразі a = b, a стає рівним true, і виводиться "a = b".

## 14. До якого результату призведе виконання наступного фрагменту коду? Перевірте. Поясніть
```java
int a = 1;
a++;
++a;
switch(a) {
    case 1: System.out.println("1");
    case 2: System.out.println("2");
    case 3: System.out.println("3");
    case 4: System.out.println("4");
}
``` 

Результат:

2
3
4

- **Пояснення**: Пояснення: після виконання a++ і ++a, значення a стає 3. У операторі switch немає операторів break, тому після того, як виконується case 3, програма продовжить виконувати всі наступні case.

## 15. До якого результату призведе виконання наступного фрагменту коду? Перевірте. Поясніть

```java
double sum = 0;
for(int i = 1; i < 10; i++) {
    sum = sum + 1 / i;
}
System.out.println(sum > 1);
```

Результат:

true

- **Пояснення**: сума буде дорівнювати 1 + 1/2 + 1/3 + ... + 1/9, що більше за 1, тому результат виведеться як true.