# Порівняння методів сортування

## 1. Порівняйте та назвіть переваги та недоліки таких методів сортування: сортування бульбашкою, сортування вибором, сортування вставкою.

### Сортування бульбашкою:
- **Переваги**:
  - Проста реалізація.
  - Легко зрозуміти принцип роботи.
  - Може бути корисним для невеликих або майже відсортованих масивів.
- **Недоліки**:
  - Повільне для великих масивів (O(n²)).
  - Немає суттєвих переваг перед іншими алгоритмами для великих даних.
  
### Сортування вибором:
- **Переваги**:
  - Простота реалізації.
  - Потрібно мінімум обміну елементами, що може бути корисно, коли обмін елементами є дорогою операцією.
- **Недоліки**:
  - Має складність O(n²), тому також неефективне для великих масивів.
  - Не є стабільним методом сортування.

### Сортування вставкою:
- **Переваги**:
  - Дуже ефективне для майже відсортованих або маленьких масивів.
  - Простота реалізації і стабільність.
- **Недоліки**:
  - Неефективне для великих масивів (O(n²)).
  - Погано працює на великих несортованих масивах.

## 2. Оцініть кожен з методів відповідно до наступних критеріїв:

### Час роботи:
- **Сортування бульбашкою**: O(n²).
- **Сортування вибором**: O(n²).
- **Сортування вставкою**: O(n²) у найгіршому випадку, O(n) у найкращому (для майже відсортованих масивів).

### Потреби у додатковій пам'яті:
- **Сортування бульбашкою**: O(1) — працює на місці.
- **Сортування вибором**: O(1) — також працює на місці.
- **Сортування вставкою**: O(1) — працює на місці.

### Стабільність:
- **Сортування бульбашкою**: Стабільне — зберігає порядок рівних елементів.
- **Сортування вибором**: Нестабільне — може змінювати порядок рівних елементів.
- **Сортування вставкою**: Стабільне — зберігає порядок рівних елементів.

### Додаткові критерії:
- **Простота реалізації**: Усі три алгоритми є простими в реалізації.
- **Підходить для частково відсортованих масивів**: Сортування вставкою ідеально підходить для частково відсортованих масивів.

## 3. Який випадок є найкращим або найгіршим для роботи цих алгоритмів? Який з методів забезпечить у цих випадках найкращий/найгірший результат?

- **Найгірший випадок для всіх трьох методів** — масив, відсортований у зворотному порядку:
  - **Сортування бульбашкою**: O(n²) — неефективне через необхідність численних порівнянь і обмінів.
  - **Сортування вибором**: O(n²) — постійно шукає мінімальний елемент у залишковій частині масиву.
  - **Сортування вставкою**: O(n²) — потрібно багато переміщень елементів.
  
- **Найкращий випадок** — частково відсортований або майже відсортований масив:
  - **Сортування вставкою**: O(n) — ефективне в такому випадку, оскільки елементи вже близькі до свого місця.
  - **Сортування бульбашкою**: O(n) — може завершити роботу раніше, якщо немає необхідності в подальших обмінах.
  - **Сортування вибором**: O(n²) — не впливає на ефективність у цьому випадку, оскільки все одно шукається мінімальний елемент на кожному кроці.

## 4. Що означають позначення O(1), O(n), O(n²)?

- **O(1)**: Часова складність є постійною. Це означає, що час виконання алгоритму не залежить від розміру вхідних даних.
- **O(n)**: Часова складність лінійна. Це означає, що час виконання алгоритму збільшується пропорційно до розміру вхідних даних.
- **O(n²)**: Часова складність квадратична. Це означає, що час виконання алгоритму зростає пропорційно квадрату розміру вхідних даних (наприклад, у випадку з бульбашковим сортуванням).
