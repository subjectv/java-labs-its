### 1. Чим інтерфейс Set відрізняється від інтерфейсів Collection та List?
- Collection — базовий інтерфейс для всіх колекцій.
- List — підінтерфейс Collection, який підтримує порядок елементів і дозволяє дублікати.
- Set — підінтерфейс Collection, який не допускає дублікатів і не гарантує порядку елементів (залежно від реалізації, наприклад, HashSet або TreeSet).

### 2. Чим HashSet відрізняється від TreeSet?
- HashSet:
  - Використовує хеш-таблицю для зберігання елементів.
  - Не гарантує порядку елементів.
  - Швидкі операції додавання, видалення та перевірки.
- TreeSet:
  - Використовує дерево для зберігання елементів.
  - Зберігає елементи у відсортованому порядку.
  - Більш повільний у порівнянні з HashSet.

### 3. Що таке хешування, хеш, хеш-код, хеш-функція?
- Хешування — процес перетворення даних у числове значення (хеш-код) за допомогою хеш-функції.
- Хеш — результат роботи хеш-функції.
- Хеш-код — числовий результат, що використовується для ідентифікації об'єкта.
- Хеш-функція — алгоритм, який обчислює хеш-код.

### 4. Яким вимогам має відповідати коректна хеш-функція?
- Повинна повертати однаковий хеш-код для об'єктів, які рівні за методом equals().
- Повинна бути швидкою у виконанні.
- Повинна мінімізувати кількість колізій (коли різні об'єкти мають однаковий хеш-код).

### 5. Які властивості притаманні хорошій хеш-функції?
- Рівномірність: рівномірно розподіляє значення по хеш-таблиці.
- Детермінованість: однаковий вхідний об'єкт завжди дає однаковий хеш-код.
- Низька кількість колізій.

### 6. Якими критеріями мають відповідати об’єкти для того, щоб посилання на них можна було зберігати у HashSet?
- Коректно реалізовані методи hashCode() та equals().
- Хеш-коди повинні бути стабільними протягом життєвого циклу об'єкта.

### 7. Які є переваги/недоліки використання HashSet у порівнянні з TreeSet?
- HashSet:
  - Переваги: швидка робота операцій, не залежить від порядку.
  - Недоліки: немає сортування.
- TreeSet:
  - Переваги: елементи завжди відсортовані.
  - Недоліки: повільніше за HashSet.

### 8. Чим поняття size відрізняється від capacity? Чи може size бути більший за capacity? Чи може capacity бути більший за size?
- size: кількість елементів у колекції.
- capacity: обсяг пам'яті, виділений для зберігання елементів.
- size > capacity: неможливо.
- capacity > size: можливо, наприклад, у динамічних структурах (ArrayList), коли є зарезервоване місце.

### 9. Що таке load factor та на що і як він впливає?
Load factor — відношення кількості елементів у хеш-таблиці до її поточної ємності. Він впливає на те, коли хеш-таблиця буде розширена, щоб уникнути надмірної кількості колізій.

### 10. Що таке асоціативний масив? Чим ключ відрізняється від значення?
- Асоціативний масив — структура даних, що зберігає пари "ключ-значення".
- Ключ: унікальний ідентифікатор.
- Значення: дані, пов'язані з ключем.

### 11. Чи може в асоціативному масиві зберігатись кілька однакових ключів або однакових значень?
- Ключі: повинні бути унікальними.
- Значення: можуть дублюватись.

### 12. До яких наслідків може привести зберігання неімутабельних об’єктів у HashSet, у HashMap в якості ключа та у HashMap в якості значення?
- HashSet/HashMap (ключ): зміна стану об'єкта може змінити його хеш-код, що призведе до некоректної роботи колекції.
- HashMap (значення): не впливає на коректність роботи.

### 13. Чи можуть об’єкти без інтерфейсу Comparable зберігатись у TreeMap?
Ні, якщо не надано компаратор. TreeMap потребує механізму для порівняння ключів.

### 14. Чи можуть об’єкти без інтерфейсу Comparable зберігатись у HashMap? Чи взагалі впливає на щось наявність у об’єктів інтерфейсу Comparable при зберіганні у HashMap?
- Можуть зберігатись у HashMap, оскільки порівняння між ключами не потрібне.
- Наявність Comparable не впливає на роботу HashMap.
