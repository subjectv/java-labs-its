### 1. Для чого призначений Collections Framework?
Collections Framework у Java використовується для роботи зі структурами даних, які дозволяють зберігати, організовувати та маніпулювати колекціями об'єктів, таких як списки, множини та карти. Він забезпечує уніфікований підхід до роботи з колекціями та включає інтерфейси, класи реалізації та алгоритми.

### 2. В чому полягає різниця між масивами та колекціями?
- **Масиви** мають фіксований розмір, визначений при створенні, і працюють лише з індексами.
- **Колекції** є гнучкими, дозволяючи змінювати розмір під час виконання, надають розширені методи для роботи з даними та підтримують різні типи даних і структур.

### 3. Які особливі властивості є у списків порівняно з іншими типами колекцій?
- Збереження порядку елементів, відповідно до їх додавання.
- Можливість доступу до елементів за індексом.
- Підтримка додавання дублікатів.

### 4. Чим списки відрізняються від масивів?
- **Списки**: Динамічний розмір, більше методів для роботи з елементами, наприклад, додавання або видалення.
- **Масиви**: Фіксований розмір, швидкий доступ до елементів, але менш гнучкі.

### 5. Чим ArrayList відрізняється від LinkedList? Який з них у яких випадках краще використовувати?
- **ArrayList**: Реалізований на основі динамічного масиву. Швидкий доступ до елементів за індексом, але повільні вставки та видалення.
- **LinkedList**: Реалізований як двозв'язний список. Швидкі вставки та видалення, але повільний доступ за індексом.
- **Вибір**:  
  - **ArrayList** підходить для частого доступу за індексом.  
  - **LinkedList** краще використовувати для частих операцій вставки/видалення.

### 6. Що таке Iterator? В чому полягають переваги використання ітератора у порівнянні з класичним циклом?
**Iterator** — це інтерфейс, який забезпечує послідовний доступ до елементів колекції без розкриття її внутрішньої структури.  
**Переваги**:
- Підтримує видалення елементів під час ітерації.
- Універсальний для всіх колекцій, незалежно від їх типу.
- Зменшує ймовірність помилок, пов'язаних з індексацією.

### 7. Що таке типізовані та нетипізовані колекції?
- **Типізовані колекції**: Використовують дженеріки для визначення типу даних, що зберігаються (наприклад, `List<String>`). Зменшують кількість помилок часу виконання.
- **Нетипізовані колекції**: Не мають визначеного типу даних (наприклад, `List`), можуть зберігати будь-які об'єкти, але підвищують ризик помилок.

### 8. Для чого потрібен інтерфейс RandomAccess?
**RandomAccess** — це маркерний інтерфейс, який позначає, що колекція підтримує швидкий доступ до елементів за індексом. Класичний приклад — `ArrayList`.

### 9. Чим Collection відрізняється від Collections?
- **Collection**: Базовий інтерфейс для роботи з колекціями, такими як `List`, `Set`, `Queue`.
- **Collections**: Утилітний клас, що містить статичні методи для роботи з колекціями (наприклад, сортування, пошук, синхронізація).
